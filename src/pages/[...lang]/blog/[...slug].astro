---
import blogJson from "../../../../generated/blogs.json";
import { type Languages, defaultLang, languageKeys } from "../../../i18n/ui";
import Blog from "../../../layouts/Blog.astro";
import type { BlogSchema } from "../../../utils/microcms";

export async function getStaticPaths() {
  const blogs = blogJson.contents.sort((a, b) => {
    return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
  }) as BlogSchema[];

  const paths: Array<{
    params: { slug: string; lang: Languages };
    props: BlogSchema;
  }> = [];

  // 同じslugのブログをグループ化
  const blogGroups = new Map<string, BlogSchema[]>();
  for (const blog of blogs) {
    const normalizedSlug = blog.slug.startsWith("/")
      ? blog.slug.slice(1)
      : blog.slug;
    if (!blogGroups.has(normalizedSlug)) {
      blogGroups.set(normalizedSlug, []);
    }
    blogGroups.get(normalizedSlug)?.push(blog);
  }

  // 各slugに対して、全ての言語でパスを生成（フォールバック処理のため）
  for (const [slug, blogGroup] of blogGroups) {
    for (const lang of languageKeys) {
      // 現在の言語に対応するブログを優先選択
      const preferredBlog = blogGroup.find((blog) =>
        blog.language.includes(lang),
      );

      if (preferredBlog) {
        // 対応する言語のブログが見つかった場合
        paths.push({
          params: { slug, lang },
          props: preferredBlog,
        });
      } else {
        // フォールバック: 最も古いブログを選択（最初に作成されたもの）
        const fallbackBlog = blogGroup.sort(
          (a, b) =>
            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),
        )[0];

        paths.push({
          params: { slug, lang },
          props: fallbackBlog,
        });
      }
    }
  }

  return paths;
}

const { slug, lang } = Astro.params;

// getStaticPaths()で既に適切なブログが選択されているので、それを使用
const page = Astro.props;
---

<Blog blog={page} lang={lang} />

