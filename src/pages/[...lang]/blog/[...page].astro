---
import type { GetStaticPathsOptions } from "astro";
import blogJson from "../../../../generated/blogs.json";
import type { Languages } from "../../../i18n/ui";
import { languageKeys } from "../../../i18n/ui";
import BlogList from "../../../layouts/BlogList.astro";
import type { BlogSchema } from "../../../utils/microcms";

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allBlogs = blogJson.contents as BlogSchema[];

  // 同じslugのブログを統合
  const blogMap = new Map<string, BlogSchema>();

  // 各言語のページ用統合処理
  const languages = languageKeys;

  const consolidatedBlogs = languages.map((currentLang) => {
    const langBlogMap = new Map<string, BlogSchema>();

    for (const blog of allBlogs) {
      const existing = langBlogMap.get(blog.slug);
      if (existing) {
        // 言語配列をマージし、重複を削除
        const mergedLanguages = Array.from(
          new Set([...existing.language, ...blog.language]),
        ) as Languages[];

        // 現在の言語のタイトルを優先、次にlanguageKeysの順序で決定
        const getLanguagePriority = (blogLanguages: Languages[]) => {
          if (blogLanguages.includes(currentLang)) return 0;
          for (let i = 0; i < languageKeys.length; i++) {
            if (blogLanguages.includes(languageKeys[i])) return i + 1;
          }
          return 999;
        };
        
        const blogPriority = getLanguagePriority(blog.language);
        const existingPriority = getLanguagePriority(existing.language);
        const shouldUseCurrentBlogTitle = blogPriority < existingPriority;

        langBlogMap.set(blog.slug, {
          ...(shouldUseCurrentBlogTitle ? blog : existing),
          language: mergedLanguages,
          // 表示されているタイトルの createdAt を表示
          createdAt: shouldUseCurrentBlogTitle
            ? blog.createdAt
            : existing.createdAt,
        });
      } else {
        langBlogMap.set(blog.slug, blog);
      }
    }

    const blogs = Array.from(langBlogMap.values()).sort((a, b) => {
      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
    });

    return { lang: currentLang, blogs };
  });

  return consolidatedBlogs.flatMap(({ lang, blogs }) => {
    return paginate(blogs, {
      pageSize: 9,
      params: { lang },
    });
  });
}
---

<BlogList lang={Astro.params.lang} blogs={Astro.props.page.data} />
