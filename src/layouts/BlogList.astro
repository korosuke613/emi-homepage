---
import { getRelativeLocaleUrl } from "astro:i18n";
import type { Languages } from "../i18n/ui";
import { languageEmojis } from "../i18n/ui";
import { useLocalTranslations } from "../i18n/utils";
import type { BlogSchema } from "../utils/microcms";
import Layout from "./Layout.astro";

type Props = {
  lang: Languages;
  blogs: BlogSchema[];
};

const { blogs, lang } = Astro.props;

const tl = useLocalTranslations(lang);

const sanitizeSlug = (slug: string) => {
  // Remove leading and trailing slashes from the slug
  return slug.replace(/^\//, "").replace(/\/$/, "");
};
---

<Layout title="Blog" description={tl({ja: '記事一覧です。', "en": "List of articles", "lo": "ລາຍການບົດຄວາມ"})} lang={lang}>
  <ul>
    {blogs.map(
      (blog) => {
        const sanitizedSlug = sanitizeSlug(blog.slug);
        return (
          <li>
            <a href={getRelativeLocaleUrl(lang, `/blog/${sanitizedSlug}`)}>{new Date(blog.createdAt).toLocaleDateString(lang)}: {blog.title}</a>
            - {blog.language
              .sort((a, b) => {
                // 現在の言語を最前に配置
                if (a === lang && b !== lang) return -1;
                if (b === lang && a !== lang) return 1;
                return 0;
              })
              .map(l => (
                <a href={getRelativeLocaleUrl(l, `/blog/${sanitizedSlug}`)} class="language-emoji-link">
                  {languageEmojis[l]}
                </a>
              ))}
          </li>
        );
      }
    )}
  </ul>
</Layout>

<style>
.language-emoji-link {
  text-decoration: none;
  margin-left: 2px;
  font-family: ui-monospace, 'Courier New', monospace;
  font-weight: bold;
}
</style>
